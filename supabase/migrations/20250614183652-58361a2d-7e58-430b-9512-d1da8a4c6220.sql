
-- Create an ENUM for user types
CREATE TYPE public.user_role AS ENUM ('jobseeker', 'recruiter');

-- Create a table for public profiles to store user role and other details
CREATE TABLE public.profiles (
  id UUID NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  user_role user_role NOT NULL,
  full_name TEXT,
  email TEXT
);

-- Function to automatically create a profile for a new user upon sign-up
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, user_role, full_name, email)
  VALUES (
    NEW.id,
    (NEW.raw_user_meta_data->>'user_role')::user_role,
    NEW.raw_user_meta_data->>'full_name',
    NEW.email
  );
  RETURN NEW;
END;
$$;

-- Trigger to execute the function on new user creation
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Create jobs table
CREATE TABLE public.jobs (
  id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
  recruiter_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  pay TEXT,
  company TEXT,
  location TEXT,
  tags TEXT[],
  verified BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create swipes table
CREATE TYPE public.swipe_direction AS ENUM ('left', 'right', 'up');
CREATE TABLE public.swipes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  swiper_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  job_id UUID REFERENCES public.jobs(id) ON DELETE CASCADE,
  swiped_candidate_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  direction swipe_direction NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT job_or_candidate_check CHECK (
    (job_id IS NOT NULL AND swiped_candidate_id IS NULL) OR
    (job_id IS NULL AND swiped_candidate_id IS NOT NULL)
  )
);

-- Create matches table
CREATE TABLE public.matches (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  jobseeker_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  recruiter_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  job_id UUID NOT NULL REFERENCES public.jobs(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE(jobseeker_id, recruiter_id, job_id)
);

-- Create conversations table
CREATE TABLE public.conversations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    match_id BIGINT NOT NULL REFERENCES public.matches(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create messages table
CREATE TABLE public.messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    conversation_id BIGINT NOT NULL REFERENCES public.conversations(id) ON DELETE CASCADE,
    sender_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Function to handle creating matches and conversations upon a right swipe
CREATE OR REPLACE FUNCTION public.handle_new_swipe()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
DECLARE
  v_recruiter_id UUID;
  v_jobseeker_id UUID;
  v_job_id UUID;
  v_new_match_id BIGINT;
BEGIN
  IF NEW.direction = 'right' THEN
    -- Case 1: A jobseeker swipes right on a job
    IF NEW.job_id IS NOT NULL THEN
      v_jobseeker_id := NEW.swiper_id;
      v_job_id := NEW.job_id;
      SELECT recruiter_id INTO v_recruiter_id FROM jobs WHERE id = v_job_id;

      IF EXISTS (
        SELECT 1 FROM swipes 
        WHERE swiper_id = v_recruiter_id 
        AND swiped_candidate_id = v_jobseeker_id 
        AND direction = 'right'
      ) THEN
        INSERT INTO matches (jobseeker_id, recruiter_id, job_id)
        VALUES (v_jobseeker_id, v_recruiter_id, v_job_id)
        ON CONFLICT (jobseeker_id, recruiter_id, job_id) DO NOTHING
        RETURNING id INTO v_new_match_id;

        IF v_new_match_id IS NOT NULL THEN
            INSERT INTO conversations (match_id) VALUES (v_new_match_id);
        END IF;
      END IF;
    
    -- Case 2: A recruiter swipes right on a candidate
    ELSIF NEW.swiped_candidate_id IS NOT NULL THEN
      v_recruiter_id := NEW.swiper_id;
      v_jobseeker_id := NEW.swiped_candidate_id;

      FOR v_job_id IN 
          SELECT s.job_id FROM swipes s
          JOIN jobs j ON s.job_id = j.id
          WHERE s.swiper_id = v_jobseeker_id
          AND j.recruiter_id = v_recruiter_id
          AND s.direction = 'right'
      LOOP
          INSERT INTO matches (jobseeker_id, recruiter_id, job_id)
          VALUES (v_jobseeker_id, v_recruiter_id, v_job_id)
          ON CONFLICT (jobseeker_id, recruiter_id, job_id) DO NOTHING
          RETURNING id INTO v_new_match_id;
          
          IF v_new_match_id IS NOT NULL THEN
              INSERT INTO conversations (match_id) VALUES (v_new_match_id);
          END IF;
      END LOOP;
    END IF;
  END IF;

  RETURN NEW;
END;
$$;

-- Trigger to execute the function on new swipe
CREATE TRIGGER on_new_swipe
  AFTER INSERT ON public.swipes
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_swipe();

-- Row Level Security (RLS) Policies

-- Profiles
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- Jobs
ALTER TABLE public.jobs ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Jobs are viewable by everyone." ON public.jobs FOR SELECT USING (true);
CREATE POLICY "Recruiters can create jobs." ON public.jobs FOR INSERT WITH CHECK (auth.uid() = recruiter_id);
CREATE POLICY "Recruiters can update their own jobs." ON public.jobs FOR UPDATE USING (auth.uid() = recruiter_id);
CREATE POLICY "Recruiters can delete their own jobs." ON public.jobs FOR DELETE USING (auth.uid() = recruiter_id);

-- Swipes
ALTER TABLE public.swipes ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can insert their own swipes." ON public.swipes FOR INSERT WITH CHECK (auth.uid() = swiper_id);
CREATE POLICY "Users can view their own swipes." ON public.swipes FOR SELECT USING (auth.uid() = swiper_id);

-- Matches
ALTER TABLE public.matches ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own matches." ON public.matches FOR SELECT USING (auth.uid() = jobseeker_id OR auth.uid() = recruiter_id);

-- Conversations
ALTER TABLE public.conversations ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Participants can view their conversations." ON public.conversations FOR SELECT USING (
    id IN (
        SELECT c.id FROM conversations c
        JOIN matches m ON c.match_id = m.id
        WHERE m.jobseeker_id = auth.uid() OR m.recruiter_id = auth.uid()
    )
);

-- Messages
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Participants can view messages in their conversations." ON public.messages FOR SELECT USING (
    conversation_id IN (
        SELECT c.id FROM conversations c
        JOIN matches m ON c.match_id = m.id
        WHERE m.jobseeker_id = auth.uid() OR m.recruiter_id = auth.uid()
    )
);
CREATE POLICY "Participants can insert messages in their conversations." ON public.messages FOR INSERT WITH CHECK (
    sender_id = auth.uid() AND
    conversation_id IN (
        SELECT c.id FROM conversations c
        JOIN matches m ON c.match_id = m.id
        WHERE m.jobseeker_id = auth.uid() OR m.recruiter_id = auth.uid()
    )
);

